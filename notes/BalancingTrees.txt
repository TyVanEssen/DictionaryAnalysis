tree balancing algorithms.
Maintain balance in the tree during insert and delete opperations.
It's like an overlay.

Types:
- AVL tree, simple not really used in practice
- Red-Black trees, not simple used comercially
- Splay trees

AVL and Red-Black: Assign additional properties, perform some rotations to maintain those properties.

Focus on RED-Black:

REDBLACK:
    BST Each node in the tree is assigned a color (Red or Black)
    
    Node:
        key
        color
        left child
        right child
        parent

    RedBlack is arbitrary (just two different conditions).

    Properties:
    1. A node is either red or black. When added in 
    2. The root node is black.
    3. Each leaf node is black
    4. If a node is red, both children must be black
    5. For each node all paths to leafnodes must contain the same number of black nodes.

    Leaf nodes::
    In a reg BST, leafnodes are reg nodes where lC and rC are null_ptr
    in RB Tree-leafnodes are empty nodes

    to maintain properties sometimes - change node color. red->black or black->red
                                     - Do a rotation. Changes height of a subtree
    
    toRotate.
    - happens as a part of the insert and delete opperations on the tree
    
    rotations:
    common in tree balancing algorithms

    left and right rotations:
    - inverses of eachother

leftRotate(x):
    y = x->rightChild
    x->rightChild = y->leftChild
    if(y->leftChild != nullNode):
        y->leftChild->parent = x
    y->parent = x->parent
    if(x->parent = nullNode):
        root = y
    else
        if (x==x->parent->leftChild):
            x->parent->leftChild = y
        else
            x->parent->rightChild = y
    y->leftChild = x
    x->parent = y

Inserting a node into a RB trees
    same as inserting into a BST + some stuff
    1. Replace nullptr with nullNode in insert
    2. set color of newnode to red.
    3. Resolve any violations of RB Properties using recoloring and rotation
    
    Add node to empty tree:
    Rule: new node is red
        violation:root must be blac - fix by making it blac

Inserting into an RB tree:
- six possible configurations that the tree can have (arround the node we added: 3 are symeteric to the other 3
- Depends on whether the parent of the new node is a right or left child of its parent

First, identify the "uncle" node in the tree
1) The uncle node is a red node
2) New node is a right child and uncle is a black node
3) New node is a left child and uncle is black

Algorithm for handling these cases

RBInsert(value):
    node *x = insert(value) //regular BST insert
    while(x!=root && x->parent->color == red):
        if(x->parent == x->parent->parent->left):
            node *uncle = x->parent->parent->right
            if (uncle->color == 'red'):
                x->parent->color = 'black'
                uncle->color = 'black'
                x->parent->parent->color = 'red'
                x=x->parent->parent
            else:
                if (x==x->parent->right):
                    x=x->parent
                    leftRotate(x)
                    //x is now a left child
                x->parent->color = 'black'
                x->parent->parent->color = 'red'
                rightRotate(x->parent->parent)
    root->color = 'black'